// let express = require("express");
// let app = express();
// let port = 9500;
// let mongo = require("mongodb");
// let MongoClient = mongo.MongoClient;
// let mongoUrl = "mongodb://0.0.0.0:27017/";
// let db;
// // mongodb://0.0.0.0:27017/
// // mongodb://localhost:27017

// app.get("/", (req, resp) => {
//   resp.send("<h1>Hello World! from node and express in home route</h1> ");
// });
// app.get("/location", (req, resp) => {
//   db.collection("location")
//     .find()
//     .toArray((err, result) => {
//       if (err) throw err;
//       resp.send(result);
//     });
// });
// app.get("/Cuisines", (req, resp) => {
//   resp.send("<h1>Hello World! from node and express in Cuisines route</h1> ");
// });
// app.get("/restaurants", (req, resp) => {
//   resp.send(
//     "<h1>Hello World! from node and express in restaurants route</h1> "
//   );
// });

// // connect with mongodb
// MongoClient.connect(mongoUrl, { useNewUrlParser: true }, (err, dc) => {
//   if (err) console.log("Error while connecting");
//   db = dc.db("newProducts");
//   app.listen(port, () => {
//     console.log(`Server is running on port ${port}`);
//   });
// });

//////////////////////////////////////////////////////////


// updated code

const express = require("express");
const app = express();
const port = 9500;
const { MongoClient } = require("mongodb");
const mongoUrl = "mongodb://0.0.0.0:27017/newProducts";
//test is the name of database in which i have the lcations collection
let db;

app.get("/location", async (req, resp) => {
  try {
    const locationCollection = db.collection("location");
    const result = await locationCollection.find().toArray();
    resp.send(result);
  } catch (err) {
    console.error("Error retrieving data from MongoDB:", err);
    resp.status(500).send("Error retrieving data from MongoDB");
  }
});

// Define a route for the root URL
app.get("/", (req, res) => {
  // Send a response to the client
  res.send("<h1>Hello World! from node and express in home route</h1>");
});

// Define a route for the /Cuisines URL
app.get("/Cuisines", (req, res) => {
  // Send a response to the client
  res.send("<h1>Hello World! from node and express in Cuisines route</h1>");
});

// Define a route for the /restaurants URL
app.get("/restaurants", (req, res) => {
  // Send a response to the client
  res.send("<h1>Hello World! from node and express in restaurants route</h1>");
});

(async () => {
  const client = new MongoClient(mongoUrl);

  try {
    // Connect to MongoDB
    await client.connect();

    console.log("Connected to MongoDB");

    // Access the database
    db = client.db();

    // Start the server and listen on the specified port
    app.listen(port, () => {
      console.log(`Server is running on port ${port}`);
    });
  } catch (err) {
    console.error("Error connecting to MongoDB:", err);
  }
})();


//--------------> 
Params 
> what we pass afetr/ ask afetr /
> we need to define if we want to use it 
> Should be used for passing 1 or 2 values 

QueryParams
> What we pass after ? 
> No need to define if we want to use it 
> Should be used for passing multiple values 


//------ > Live mongoDB URL

mongodb+srv://<dev>:<test-test123>@cluster0.7xjwp6p.mongodb.net/?retryWrites=true&w=majority


db.orders.updateOne(
  {consition},
  {
    $set: {
      data
    }
  }
)


db.orders.remove({_id})


// not getting response in update and delete but functioning properly --------- doubt
------------------------------------------ Backup if new code dosent works

 db.collection("menu")
      .find({ menu_id: { $in: req.body.id } })
      .toArray((err, result) => {
        if (err) throw err;
        resp.send(result);
      });

-------------------------------------------
      // update Order

app.put("/updateOrder/:id", async (req, resp) => {
  let oId = Number(req.params.id);
  await db.collection("orders").updateOne(
    { Order_id: oId },
    {
      $set: {
        status: req.body.status,
        bank_name: req.body.bank_name,
        date: req.body.date,
      },
    },
    (err, result) => {
      if (err) throw err;
      resp.send("Order Updated");
    }
  );
});


---------------------------
await db.collection("orders").deleteOne({ Order_id: oId }, (err, result) => {
    if (err) throw err;
    resp.send("Order Deleted");
  });